[["index.html", "Analysing Flights with R Chapter 1 How to use this book 1.1 Before you start 1.2 Ways to Use the Material 1.3 What’s gone wrong?", " Analysing Flights with R David Marsh 2021-01-28 Chapter 1 How to use this book 1.1 Before you start You need to have RStudio and R installed on your machine. We assume that you are familiar with air traffic data, so won’t spend time explaining the concepts. This book is available as html here (TBD) and can be downloaded complete with data from here (TBD). If you’re working through the book as training, then it will help to install (TBD - training bundle) If you want a more speedy introduction, then Enrico Spinielli has covered the important steps here.. Sebastien Thonnard and others have compiled an (internal) wiki on the intranet. There are also several useful ‘cheat sheets’ see (TBD) 1.2 Ways to Use the Material The book aims to support you using it in a number of different ways: Training. Work through chapters in order, or pick out specific chapters if you need a refresher on a topic. Read the explanations, grab the code and run it, and test your understanding by answering questions and doing exercises. Reference. Use the search to find some how-to material directly. Snippets. The book builds up snippets of usable code (TBD - how complete?) for you to cut-and-paste. But it is never going to replace the huge amount of excellent information, especially in stackoverflow. A key principle is that “Google is your friend”: even if I prefer DuckDuckGo for many purposes, a google search is often more productive for R. Whether it’s for how to do something, or how to respond to an error, usually someone has already suffered, and some kind person has answered. Google it. 1.3 What’s gone wrong? Each chapter has a “what’s gone wrong?” section near the end, discussing some typical potholes that we all fall into from time to time. Look there especially if you don’t see the results from the code in the book that you were expecting. We actually start the book with one classic pitfall: R is case sensitive, which can be quite a culture shock if you’re brought up on other systems. This matters for filenames as well as code. When in doubt, check the case! "],["start.html", "Chapter 2 Getting started 2.1 Orientation in RStudio 2.2 First project 2.3 First code 2.4 First packages 2.5 File types 2.6 What’s gone wrong? 2.7 Test yourself", " Chapter 2 Getting started We said in chapter 1 that you need first to install R and RStudio. These are separate pieces of software: R does all the statistical and graphics stuff, while RStudio provides the graphical user interface. In this chapter we get up and running in RStudio. 2.1 Orientation in RStudio Here we take a brief look around the RStudio interface. Use ‘RStudio/Help’ to get more detailed help. The RStudio interface can be customised almost beyond recognition. We’ll use a mix of styles in the book so that you don’t get too fixed, but it’s probably helpful to your colleagues not to re-order the main four panes, otherwise they’ll find looking over your shoulder or screen-sharing a disorienting experience. A basic MS Windows RStudio looks something like this. RStudio snapshot The main panes of the screen are: Top left: source code, shown as a number of tabs one for each file; Bottom left: the ‘console,’ which is a scratchpad for entering code, and where log output is usually shown (and some other tabs which we don’t need here); Top right: the ‘environment’ and ‘history’ tabs are of main interest. Environment is where you can explore all the data you’ve created. History is useful for re-doing something, particularly as you can search for code. Bottom right: This has several important tabs Files: for exploring files within a project, can be quicker than using the windows explorer Plots: is where plots will appear (usually) Packages: is for checking which packages are installed, or active (see TBD) Help: all the details of the functions that you will need - this is usually quicker to use than googling a function (though the help files come up when you google, from various providers). The buttons that appear around the panes are context-sensitive: they will change according to the type of file that you have open. There are some hot-keys for moving rapidly around the panes: I most use ctrl-1 to go to the source code, ctrl-2 for the console. You can then guess the others. Recent versions of RStudio have a tutorial (tab in top right pane) if you need more detail. 2.2 First project While you can work with ‘bare’ files of R code, we think it’s tidier to use ‘projects,’ for two main reasons: you can keep several shorter files of code together, which makes it easier to navigate; and a project automatically remembers which directory it’s working in, so you can manage data input and output and graphic output more neatly. Create yourself a new project ‘File/New Project,’ selecting the options new project (not new package), give it the name ‘justlearning’ and browse to put it in your personal R directory. (TBD templates). It will open without a code panel, because you have no code yet. It looks like this. You can already execute R code in the console (bottom left, ctrl-2), but we want to save and organise code. So we do a bit more organising, and then in the next section, create a file for the code. In this book we’ll assume that projects always keep data in the data directory, and save graphs to the graphs directory. You can create these quickly in your new project by copying the code (quick-copy icon appears top right in the code block) and pasting it into the console (and press return). # good to have these in every project dir.create(&quot;data&quot;) dir.create(&quot;graphs&quot;) If for some reason the directories already exist, don’t worry, you’ll just get a warning. You can also do this manually using ‘New Folder’ in the files tab (ctrl-5), but then look out for lower case! You could even use your operating system file explorer - these are just ordinary directories (‘folders’). When you quit RStudio it will save any data and open files in your project. So you can re-open and continue from where you left off. If you’ve opened very large files, just beware that saving a copy as you close can take some time. (see TBD) 2.3 First code Now you’ve got a blank project, add a new blank R script using File/New File/R Script, or the ‘file plus’ icon top left. It appears in the source code pane, top left. Immediately save it; ‘chapter2’ for example. The name isn’t critical here, but avoid spaces and punctuation. By default, it will be saved to the top level in the project. This is fine for many projects, though in some cases we might choose to organise code differently. Type this code into your script, either manually or copy paste. 3 + 4 # I know pi pi 1:50 cos(pi/3) # angle is in radians Unlike in the console, it doesn’t get executed as you type. You have to run it. Usually you’re either: stepping through code, running a bit at a time, in which case ctrl-enter (cmd-enter on the Mac) is easy to use: it runs where the cursor currently sits, and then moves to the next line of code, jumping over comments that are preceded by #; running all the code, which you can do by pressing the ‘source’ button (or select all and ctrl-enter). Output appears in the console as a running log. 2.4 First packages A ‘package’ provides a collection of functions, often some data and sometimes some new data types. If you’re starting in R, and just aiming to find your way around in and use code, then mostly what you need to know is how to load packages (and what that means), and a little about the more common ones. That’s what we cover in this section sections. 2.4.1 Package basics Some packages come bundled with a basic installation of ‘R,’ such as base which provides, as the name suggests, many of the most basic functions. But there are thousands of other packages, coming from: CRAN or various ‘mirror’ (official copy) sites hosted elsewhere, such as at Ghent University. These packages have been through a degree of quality control, and are preferred to the less official sources. Github and other public repositories. We share some there, such as CODA taxi times and the PRC dashboard. Home-made. Making them is out of the scope of the book, but you will want to load the statfor package (TBD) created by Sebastien Thonnard that builds some access to Eurocontrol datawarehouses as well as nice formatting. There are two1 steps to using a package, and sometimes these get confused: Installation. You type install.packages(\"dplyr\") and R finds the files for that package and saves them on your machine or on a network drive. So the files are available. You’ve done the shopping and the food is in the kitchen cupboards. Attaching or Loading. You have to make a package available for use for your session. You’ve pulled the ingredients for your recipe out of the cupboard and they’re on the kitchen table. If there’s a difference between ‘attaching’ and ‘loading’ then it doesn’t matter here. A very few packages are automatically loaded at the start of the session. In the packages pane, a package is listed if it is installed and ticked if it’s loaded. In the screenshot, just the base package is loaded of the ones listed. Clicking on the package name takes you to the documentation. There’s a manual for all functions together, as a pdf, but it’s usually easier to use the help pane to get the same material, and perhaps copy examples from the end of each help entry. More importantly here there are links to vignettes, and often now to websites with more info. Vignettes are not little stickers, but essential how-to guides mixing text and code; often this can provide a skeleton that you can copy and adapt to your own need. You can load a package by ticking the box, but normally it’s done in code, as in this example. library(lubridate) # lots of date-related functions. ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union Two packages can define a function with the same name. That is not something CRAN controls, and when there’s a clash, on loading the second one ‘masks’ the first, as in the message displayed above. Sometimes, as an alternative to loading the full package, you might see in code a ‘two colon’ usage, such as base::union. This is very common inside packages (it’s recommended), and it’s a way to insist that the first package version of the function should be used. There are often many different functions that you could use to achieve the same result, eg base::paste() and stringr::str_c() both concatenate strings (tbd). There’s an art in R to doing the most with the minimum number of packages, since it takes time to find your way around the functions in a package. That’s like the satisfaction of making the recipe from things you already have in the cupboard. But sometimes, you just don’t want to make the flaky pastry yourself. There are times when you’re looking at a complex task and should be thinking ‘surely someone has already tackled this in R?’ A little googling might find you most of the pieces already in place. In a way, you develop a personal ‘dialect’ of R, from the packages you choose to use most often. We’ll discuss one of the most common dialects, the tidyverse, in more detail in the next section. 2.4.2 Tidyverse The tidyverse is our chosen dialect, in the sense that in most cases we’ll use the functions and data structures, and way of organising, that go with this collection of packages. There’s a lot of excellent documentation already available, so we will explain some basics here, and introduce other elements as we need them for flight data examples. The tidy in ‘tidyverse’ refers to a tidy data structure: a table with each variable in its own column and each observation on one row. While we often put years across the table, and countries down the side, this is not ‘tidy.’ Table 2.1: An untidy table. Country Flights2019 Flights2020 France 1.3 1.5 Germany 5.2 6.0 Table 2.1: An tidy table. Country Year Flights France 2019 1.3 Germany 2020 5.2 France 2019 1.5 Germany 2020 6.0 The main data structure used by the tidyverse is the dataframe, although increasingly the tidyverse prefers the ‘tibble’ tbl, which is a specific sort of dataframe. (TBD) We won’t worry about the differences here. For most ‘quick pieces of code,’ the easiest is to start with a library(tidyverse) to load all the parts of the tidyverse. If you were writing a package, that wouldn’t be very efficient, because there’s quite a lot of it. Sometimes you’ll see individual parts of the tidyverse loaded including: ggplot2: lots of plotting functions (see TBD) dplyr: for manipulating and processing data tidyr: for tidying data, such as pivot-table like actions, or splitting columns. And there are packages which are on the outskirts of the ‘tidyverse’ which get announced when you load. library(tidyverse) These include lubridate and stringr which we’ve already mentioned. 2.5 File types You will see lots of different file types (ie file extensions). The main ones to remember are: .R, .Rmd: both contain R code, though .Rmd is actually ‘r markdown’ which is a mix of code and text; .RProj: contains an R ‘project’ - if you see one of these in the directory, this is the one to open - everything else works from there (see TBD); .rda, .RDS: are different types of data file. R works easily also with .csv and .xls(x) see TBD. 2.6 What’s gone wrong? If you see a window like this, then you have started R rather than RStudio. That is a GUI and you can use it to execute R code, but you’ll find RStudio easier for all but the quickest snippets of code. If it keeps on happening you will find it helpful to associate R files (.R, .RMD and others) with RStudio rather than R. If you get errors saying a certain package is only compatible with version xx and higher (of R), and you think you’ve recently updated, are you sure you updated R rather than RStudio? The RStudio version is found from the top menu ‘RStudio/About R Studio,’ the R version is seen when you first start up (see the image just above), or is printed if you type version in the console (see TBD). If you’re searching in ‘help’ and a function isn’t appearing, for example in the drop-down as you type, it is probably because it comes from a package that isn’t loaded. You can finish typing, and the system will search and may find it, but also some other less good matches. Or if you know the package name, you can type ?ggplot2::geom_line for example, in the console to go straight there. 2.7 Test yourself 2.7.1 Questions In which pane will you (usually) find the help on functions? Which of these provides a graphical user interface (GUI): R, RStudio? Which ctrl-key combination takes you to the environment pane? What does an .rda file contain? What’s the difference between typing into a source file and into the console? What is a ‘vignette?’ 7 (teaser) What does 3 + 1:3 give? 2.7.2 Answers Bottom right. Both, though you’ll nearly always want to use RStudio. CTRL-8 R data With the console, code is executed as each line is completed. An extended entry in the documentation showing how to put the functions of the packages together. 4 5 6 actually, there’s a third, but that’s too much detail for here↩︎ "],["first-look-at-data-and-co2-emissions.html", "Chapter 3 First look at data and CO2 Emissions 3.1 Looking at data: CO2 Data 3.2 Extracting variables 3.3 Extracting a few values 3.4 CO2 Scatter plot 3.5 What’s gone wrong? 3.6 Test yourself", " Chapter 3 First look at data and CO2 Emissions It’s hard to get far in an analysis without first looking at the data to ask questions such as: What variables are there? Do I know what they all mean? What time period does it cover? Which countries, or airports etc, are included? In this chapter, we introduce some of the ways to take a quick look at your data. We introduce some data on CO2 emissions per European State from aviation. In this chapter read_xlsx(), &lt;-, summary, str, environment pane, View(), unique, head, c(), [], ggplot() Re-open your justlearning project and start a new source file, to copy and paste the examples into. This starts a new R session, which means you have to re-load the package(s) that you need. suppressPackageStartupMessages(library(tidyverse)) # without lots of messages filling up the book 3.1 Looking at data: CO2 Data We use public data on national CO2 emissions from aviation available on the EUROCONTROL/AIU website. We choose this, apart from the interest in the data themselves, because it’s a small set so quick to download, and it’s already tidy (each variable in one column). # download the file to the data folder # download.file(&quot;https://ansperformance.eu/download/xls/CO2_emissions_by_state.xlsx&quot;, # &quot;data/CO2_emissions_by_state.xlsx&quot;) # load from the DATA worksheet - case sensitive! aviation_co2 &lt;- readxl::read_xlsx(&quot;data/CO2_emissions_by_state.xlsx&quot;, sheet = &quot;DATA&quot;) We’ve already seen the function(parameter) way to call a function in the cos(pi/3) example. Now we have something &lt;- function(parameter, parameter). This is a peculiarity of R that you just need to get used to. Think of it as saying: create something in the environment (without saying what it is just yet); then fill it (&lt;-) with; the results of the function. Now that the Excel is downloaded, comment out the 2 lines, because we don’t need to keep downloading if you happen to re-run the code. If there were frequent updates, maybe you would keep downloading. See (TBD) for an example. See the Excel, now in your project data folder, for disclaimer and details. International conventions mean that CO2 emissions are measured from flights departing airports in a State. read_xlsx automatically selects the first row as variable names. summary(aviation_co2) ## YEAR STATE_NAME STATE_CODE Y_CO2_QTY_TONNES Y_TF ## Min. :2010 Length:432 Length:432 Min. : 1 Min. : 2 ## 1st Qu.:2012 Class :character Class :character 1st Qu.: 196430 1st Qu.: 16603 ## Median :2015 Mode :character Mode :character Median : 1042641 Median : 56292 ## Mean :2015 Mean : 4223363 Mean : 205720 ## 3rd Qu.:2017 3rd Qu.: 3308375 3rd Qu.: 225938 ## Max. :2019 Max. :37260380 Max. :1265392 The summary function is fairly basic, but it gives a quick feel for what’s in the data. Often more helpful with numeric than character, but also useful for spotting if there are missing values NA, of which there are none here. In this dataset we have: YEAR: An integer, not a date, but read_xlsx reads this as a real number. STATE_NAME, STATE_CODE: A long name and the 2-letter ‘country code’ derived from the ICAO 4-letter communication address, of which the less said, the better. Y_CO2_QTY_TONNES: Total annual CO2 emissions, in (metric) tonnes. Y_TF: Total flights. Presumably this is departing flights (TBD) There are three other important ways to explore the data. Firstly in the environment pane (top right, CTRL-8), where you can click the blue arrow-disk to see a summary. You get much the same thing in the console by typing str(aviation_co2) where str is for ‘structure.’ You should see something like this. We can see that there are 3 numeric variables (num) and 3 character variables (chr). All 5 variables have the same number of observations (432 - but maybe this is more by the time you download it). In a tibble or data.frame the columns are always the same length. The second way, because this is a tibble, is just to type its name in the console. [Try it] This is useful but just bear in mind that for some data structures, this might fill up your console with a lot of output. Save it for when you’re sure you’ve a tibble. You can check by typing class(my_thing) into the console to see if my_thing is a tibble (shown as tbl). The third way gives a way to explore every observation. Click on the dataset name next to the blue arrow or type View(aviation_co2) in the console (sorry about the upper case ‘V’) and you get a tabular data explorer, which allows you to sort and filter. You should see something like this. Try out the sorting and filtering in the view window. 3.2 Extracting variables To answer more questions about the data there are some more tools to summarise the values that it takes. We saw summary() works for numeric values, but what about discrete ones? There are several ways to pull one variable out of your data. We’ll use the $ notation, partly because there’s a reminder of this in the environment tab. # pull out all values in the column state_vbl &lt;- aviation_co2$STATE_NAME states &lt;- unique(state_vbl) Look in the environment pane, state_vbl is listed under ‘Values.’ It’s a (column) vector, one of the simple data types in R which is why it’s listed under ‘Values’ and not under ‘Data.’ You’ve just pulled a column out of aviation_co2 so not surprising that it has the same number of rows as aviation_co2. And the first values are all ALBANIA, or were when this book was compiled. Really we want to know how many different States there are, and which ones. unique does what it says, and we’ve saved these as states; a variable name which to me implies ‘unique States.’ You can tell how many there are from the environment pane, or you could use length(states). [How many are there?] To inspect all of these values you can just type states into the console, a good way to check the spelling of some, perhaps. [Try this.] The order in which the elements are shown is as in the original data, there’s no careless re-ordering. If you’ve worked with SAS PROC SQL or other languages, it might come as a relief to hear that, in R, the order of rows stays where it’s put until you say otherwise; none of this sorting before every operation. We’ll see some ways to handle ‘top’ values later (TBD - top_n) So in this case, even if the states are in alphabetical order, that’s just because the original Excel file was. 3.3 Extracting a few values We’ve just seen how to pull a variable out of a tibble. How do we extract one or more values out of the vector that we created? The states are quite a lot to show in the console. If you had even more you might just want to see a few. The code chunk above shows that head() is useful for showing you the first ones (6 by default). head(states) ## [1] &quot;ALBANIA&quot; &quot;ARMENIA&quot; &quot;AUSTRIA&quot; ## [4] &quot;BELGIUM&quot; &quot;BOSNIA AND HERZEGOVINA&quot; &quot;BULGARIA&quot; If you want to pull out a single value, or a few of them, again there are multiple ways to do this, but the simplest is this. We show here two ways to select with a vector of numbers: creating a consecutive sequence of numbers (1:3); and creating a vector with an arbitrary selection (c(1, 5, 10)). states[1] ## [1] &quot;ALBANIA&quot; states[3] ## [1] &quot;AUSTRIA&quot; states[1:3] ## [1] &quot;ALBANIA&quot; &quot;ARMENIA&quot; &quot;AUSTRIA&quot; states[c(1, 5, 10)] ## [1] &quot;ALBANIA&quot; &quot;BOSNIA AND HERZEGOVINA&quot; &quot;CZECHIA&quot; We’ll deal with subsetting the whole dataset, rather than just a vector, in the next chapter. 3.4 CO2 Scatter plot It’s hard to beat a graph as a way to explore data. So we end the chapter exploring a simple graph. The tidyverse way of doing this is to use ggplot. 3.4.1 First draft In the most basic scatter plot we have the following components, joined with a +. This + is peculiar to ggplot; another lovable quirk of R. Learn it, but get used to the idea that you’ll forget and use other conjunctions by mistake at times. In the simplest code we have: ggplot: with parameters the data to use, and an ‘aesthetic’ aes; aes: gives the x and y first, and here also says choose colour based on year; geom_point: says to plot points with these data, ie a scatter plot. ggplot(aviation_co2, aes(Y_TF, Y_CO2_QTY_TONNES, colour = YEAR)) + geom_point() Even this simple example illustrates that: a parameter can be another function call aes(); we can specify parameters by order of appearance (x and y are first and second for aes) or by name (colour), or both; geom_point takes its aesthetics by default from the ggplot statement. There’s a (very) rough correlation along a diagonal line, but it would be interesting to know which States are above the line (more CO2 per flight) and which below. And is the change gradual, or is there much variability? 3.4.2 Improve the titles Let’s at least label the axes so that someone else can see quickly what has been plotted. We can transform variables on the fly (using the rule that a parameter can be a function call, here to the function /), so let’s convert both axes to millions. The label on the legend is meaningful, but to avoid the block capitals we can change that too within the labs statement. ggplot(aviation_co2, aes(Y_TF/1e6, Y_CO2_QTY_TONNES/1e6, colour = YEAR)) + geom_point() + labs(x = &quot;Departing Flights (millions)&quot;, y = &quot;CO2 (million tonnes)&quot;, colour = &quot;Year&quot;, title = &quot;Emissions per State&quot;) 3.4.3 and with clustering by State It’s tempting to read the graph as having a number of small clusters, each with flights and CO2 increasing with time, and assume that each of these corresponds to a single State. It would be nice to use the graph to see if that’s true. There are too many countries to give each its own shape (we’ll see shapes used more effectively in TBD), but we can easily add a line to join the points for each State. [How do you think you would add a line?] We need both to add a line, which follows the pattern of geom_point, and group by State. That’s done in the same way that we coloured by year, in the aesthetics. But there are several ways to plot a line geom_line joins the points in x-axis order, we want data order, so that’s geom_path. Out of a sense of neatness, we also add a subscript to CO2. The code bquote(~CO[2]~\" (million tonnes)\") took some googling and is cryptic, but it works! ggplot(aviation_co2, aes(Y_TF/1e6, Y_CO2_QTY_TONNES/1e6, colour = YEAR, group = STATE_NAME)) + geom_point() + geom_path() + labs(x = &quot;Departing Flights (millions)&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), colour = &quot;Year&quot;, title = &quot;Emissions per State&quot;) The graph isn’t ready for a presentation yet, but a story is already emerging. The lines do the job of grouping the years for each State together. We see a graph with 6 busy States, 3 of which are fairly linear, so a relatively fixed CO2/flight. Three others are more variable from year to year. Then there are two States, with flights in the 0.25-0.5 million flights range and that diverge from the main trend line. The remaining States rather overlap in this graph. We’ll find out how to pick out and label States in the next chapter. 3.5 What’s gone wrong? 3.6 Test yourself 3.6.1 Questions Use head to view the first 10 states. Using the help file for head, how would you display the last 6 states? Which State names are followed by ’*’? Print the distinct state ISO codes to the console. Print the 3rd, 23rd and 33rd state names to the console. What does &lt;- do? In ggplot what does + do? 3.6.2 Answers head(states, 10) head is documented alongside tail: use tail(states) (In my version of the data), typing states into the console, and by eye I see 4 States with a ’*’. We’ll see other ways to do this, later. unique(aviation_co2$STATE_CODE) states[c(3, 23, 33)] It puts the results of whatever is on the right-hand side into the object on the left. It connects parts of the definition of a graph together. "],["filtering-a-dataset-and-refining-the-co2-graph.html", "Chapter 4 Filtering a dataset and refining the CO2 graph 4.1 Sequences of functions 4.2 Filtering datasets and Logical Tests 4.3 Selecting the busiest States 4.4 CO2 graph for the top States 4.5 Labelling the CO2 graph 4.6 What does the graph say about CO2? 4.7 What’s gone wrong? 4.8 Exercises", " Chapter 4 Filtering a dataset and refining the CO2 graph In this chapter we improve the CO2 emissions graph, en route learning how to filter observations from a dataset, to add new variables, and to use the pipe operator %&gt;%. In this chapter filter(), ==, %in%, mutate(), slice_max(), %&gt;%, geom_text_repel() On restarting your justlearning project, you should still have the aviation_co2 dataset in your environment, since RStudio saves these data and reloads on restart. If not, use the code in section @ref{loadco2} to load the Excel file from the data folder. If you have closed RStudio and re-opened it, then you have a new session and need to reload packages, in this case library(tidyverse). 4.1 Sequences of functions It’s time for a bit more syntax. We saw already that you can combine functions by making one the parameter to another. Or to put it another way, wrapping one around the other. As you combine more functions, this soon becomes hard to read, and you have to rely on the editor to help you spot whether you’ve enough brackets closed at the right point. For that reason we use a different syntax, the ‘pipe’ operator %&gt;% introduced by the magrittr package and adopted by the tidyverse. If you learn only one control-key combination learn shift-ctrl-M (also shift-command-M on Mac). This must be the fastest way to type ‘%&gt;%!’ [Try it in your console.] With a new line after each %&gt;% and appropriate indenting (RStudio helps with that), you get code that looks like this. This says, fill a with what you get from dataset b after applying function fun1, then function fun2. # which is clearer # with a pipe? a &lt;- b %&gt;% fun1(p1) %&gt;% fun2(p2, p3) # or without? a &lt;- fun2(fun1(b, p1), p2, p3) The pipe syntax works because fun1 actually has a parameter list that starts with the dataset to which it should be applied fun1(data, p1,...). So b %&gt;% fun1(p1) is just another way of writing fun1(b, p1). Or, the other way around, you can use %&gt;% whenever you have a function whose first parameter is the dataset to be operated on. It turns out that this is true for very many of them, and the tidyverse is designed that way. 4.2 Filtering datasets and Logical Tests As is so often the case, in R there are several of ways to select rows from a dataframe or tibble. We’ll focus on the filter(data, test) function. For this we need to know how to construct a logical test. There are three parts to this: the logic, the test functions and what’s being tested. Logic is mostly given by &amp;, ! and |2 for ‘and,’ ‘not’ and ‘or,’ grouped with round brackets in the normal way. The test functions are almost as you might expect: &gt;, &lt;. However, in R you need to use == not = to test for equality. I suspect this creates the most common typo in R code! Check the documentation of dplyr::filter for a more complete list of test functions: in particular look out for %in%, which we will use shortly. One really nice touch in filter() is in the third part: what’s being tested. One of the trickiest bits of learning R is knowing how, within a function, to refer to one or more variables of the dataset. In filter() you can just use the name of the variable; so no quotes needed around the name, and the code assumes it is a variable from the data parameter, so no need to use aviation_co2$. In this example, we don’t push the result into a dataset (no a &lt;-), so it gets printed out directly. aviation_co2 %&gt;% filter(YEAR == 2018 &amp; STATE_NAME %in% c(&quot;CZECHIA&quot;, &quot;ALBANIA&quot;)) ## # A tibble: 2 x 5 ## YEAR STATE_NAME STATE_CODE Y_CO2_QTY_TONNES Y_TF ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 ALBANIA LA 143871. 12744 ## 2 2018 CZECHIA LK 1381672. 90679 Note that: the order of the rows is as in the original dataset, not at all influenced by the order of the naming of the States in the test YEAR and STATE_NAME are ‘bare’ strings, and are shorthand for aviation_co2$YEAR etc but “CZECHIA” is a value of a variable so needs to be a string in quotes and the test is case-sensitive. 4.3 Selecting the busiest States In the previous chapter we selected the first-named States with head(). Now we do something more useful: selecting the top States by flights, using slice_max(). We need to define this a bit more clearly. ‘Top’ could mean in a particular year, or over the whole period (where flights have decreased as well as increased). We choose to mean ‘top by flights in 2019.’ This is partly out of habit (this is often the meaning) and partly because we need to introduce fewer new bits of R to implement it. The code is like this. A final novelty is that we use pull() which, as its help-file says, does the same as $ (learned in the last chapter) but looks nicer in pipes. top_states &lt;- aviation_co2 %&gt;% filter(YEAR == 2019) %&gt;% # top in year 2019 slice_max(Y_TF, n = 8) %&gt;% # top 8 pull(STATE_NAME) slice_max() is a good example of how R changes with time. New versions of packages introduce minor or major changes. Sometimes a function is superseded (left to rot), other times it may be deprecated (you have some time to switch to a new version before it’s removed). The function top_n, which you might see lying around in legacy code, has been superseded by slice_max(). [Check out the documentation of top_n for some of the reasons.] These changes mean that just updating to the latest version of the package is not always the best idea, because you might have to spend some time checking for changes. It also means that, when searching on the web for hints, snippets and answers, you need to look at the date of the answer. ggplot in particular has changed quite a bit, so answers more than 5 years old or so might not be that helpful. 4.4 CO2 graph for the top States With top_states in place we can easily plot the data for the busiest States. We update the title, and add a footnote (caption) to explain what’s going on. We could have created a new dataset, eg top_co2 &lt;- aviation_co2 %&gt;% filter(STATE_NAME %in% top_states), and then used this in the ggplot. But we only plan to use this filter once, so to avoid cluttering the environment with datasets, we filter ‘on the fly,’ within the ggplot statement. In this case, this is a matter of personal preference. If the datasets were a lot larger, and we intended analysing and transforming just the top States in further graphs, the decision might be different. ggplot(aviation_co2 %&gt;% filter(STATE_NAME %in% top_states), aes(Y_TF/1e6, Y_CO2_QTY_TONNES/1e6, colour = STATE_NAME)) + geom_point() + geom_path() + labs(x = &quot;Departing Flights (millions)&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), colour = &quot;Year&quot;, title = &quot;Emissions for the busiest 8 States&quot;, caption = &quot;Source: EUROCONTROL. &#39;Busiest&#39; means most flights in 2019.&quot;) One advantage of filtering on the fly is that we can change on the fly. [Change the filter to the States not in the top 8. It takes one key press. Re-run the graph. Update the titles too.] As an analyst, I really want to know which country is which. With just 8 States shown, maybe I can use symbols? At one level it’s quick to do. Just replace group = with shape =. [Try this.] ggplot complains that it doesn’t really like using more than 6 symbols, because it becomes hard for the reader to jump between legend and graph. We could roll with it and learn how to extend the pallette, but is there another solution. We can separate States by colours. Again, quite quick: replace colour = YEAR, group = STATE_NAME with colour = STATE_NAME. [Try this.] The line means we can work out the ordering of the years easily, so losing the year isn’t a big issue here. But eight colours is also a lot to tell apart. Even without colour blindness, you might think they’re clear but when projected onto a screen or printed or on a tiny phone screen, perhaps not. 4.5 Labelling the CO2 graph It’s relatively easy to follow a slightly different route: adding State names directly to the graph. This is done with geom_text added to the ggplot. We only want to label the point in 2019 rather than all years, so we create a new variable which is empty except in rows for the year 2019. mutate(a = ...) is the function for adding a variable ‘a’ to the dataset3. if_else() is how we give a value for only some years. Notice that, like the filter(), we can refer to other variables in aviation_co2 without inverted commas. This time, we amend the aviation_co2 dataset itself, because we want to be able to use this in several places, not just in a single graph. The syntax a &lt;- a %&gt;% ... follows the same pattern as you saw earlier, but you’re overwriting the original dataset. The geom_text() inherits all the aesthetics from the ggplot function, so it already knows where to find x and y coordinates, and what colour to use. We still need to tell geom_text() where to find the labels. This is also an aesthetic. aviation_co2 &lt;- aviation_co2 %&gt;% mutate(state_label = if_else(YEAR == 2019, STATE_NAME, &quot;&quot;)) ggplot(aviation_co2 %&gt;% filter(STATE_NAME %in% top_states), aes(Y_TF/1e6, Y_CO2_QTY_TONNES/1e6, colour = YEAR, group = STATE_NAME)) + geom_point() + geom_path() + geom_text(aes(label = state_label)) + labs(x = &quot;Departing Flights (millions)&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), colour = &quot;Year&quot;, title = &quot;Emissions for the busiest 8 States&quot;, caption = &quot;Source: EUROCONTROL. &#39;Busiest&#39; means most flights in 2019.&quot;) This is close, but not quite good enough. The text is centred on the point, and this creates some ugly overlaps. There are lots of options in geom_text() to adjust the position, and you’ll find lots of examples on the web [Check the documentation for a start.]. So we could spend time adjusting the positions. But this is a first example of the rule: ‘surely someone has already come across this problem?’ Someone has indeed spent time to come up with good ways to deconflict and position labels on graphs. The package is called ggrepel, which you might need to install with install.packages(\"ggrepel\"), and it provides a ‘drop in’ replacement for geom_text naturally called geom_text_repel. To avoid using library(\"ggrepel\") when we’re just using one function, we use the double-colon syntax in the code. The defaults for this function work pretty well in this particular case. But there are a couple of things I’d like to fix: the block capitals and the year legend. Title case would be nicer, so we convert the STATE_NAME using the stringr package function str_to_title(). stringr is already loaded as part of the tidyverse, and since most of its functions begin ‘str_’ it’s quite easy to start searching in the help pane for the right one [Try this.]. In this case state_label already exists and we overwrite it. The other thing to improve is the year scale, which shows with meaningless decimals. We use a quick-ish fix, rather than the tidiest-possible solution. (see TBD) Scales, whether the axes or colours, are controlled by ggplot functions starting scales_ in this case scales_colour_steps() gets us a scale that shows the individual years. This is a ‘dirty’ solution in the sense that, if the data for 2020 get included, you might need to tweak the code; but then, we’ve hard-coded 2019 in a number of places, so this is dirty elsewhere. We’ll see cleaner options later (TBD). aviation_co2 &lt;- aviation_co2 %&gt;% mutate(state_label = if_else(YEAR == 2019, str_to_title(STATE_NAME), &quot;&quot;)) ggplot(aviation_co2 %&gt;% filter(STATE_NAME %in% top_states), aes(Y_TF/1e6, Y_CO2_QTY_TONNES/1e6, colour = YEAR, group = STATE_NAME)) + geom_point() + geom_path() + ggrepel::geom_text_repel(aes(label = state_label)) + scale_colour_steps(n.breaks = 8, show.limits = TRUE) + labs(x = &quot;Departing Flights (millions)&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), colour = &quot;Year&quot;, title = &quot;Emissions for the busiest 8 States&quot;, caption = &quot;Source: EUROCONTROL. &#39;Busiest&#39; means most flights in 2019.&quot;) 4.6 What does the graph say about CO2? Longer-haul flights use heavier aircraft and therefore the proportion of long-haul flights in your national mix is a major influence on CO2 per flight. For example, the Netherlands has more CO2 per flight than Norway: Norway has a significant domestic (so short-range) market, which the Netherlands does not. These have been relatively stable. The UK also has a proportionally larger long-haul market. And a decline in its domestic market has led to quite a rapid increase in CO2 per flight in recent years. So, the graph helps to build a story: though we needed some supporting information to provide some of the explanation. It has also become clear that we’re interested in CO2 per flight. See the exercises for a graph on that more directly. 4.7 What’s gone wrong? It’s inevitable that you will type = in tests where you mean ==. Some functions have friendly messages, since this is so common. Others less so. Watch that case! We are using the function filter(), not the function Filter() which is something else entirely. if_else is a fussy version of the base function ifelse, that we use here to maximise use of tidyverse functions. If it warns you that the ‘false’ must be something, then it has your long-term interests at heart. It just means that it’s a different type to the ‘true.’ Compare ifelse(1&lt;2,\"true\",NA) and if_else(1&lt;2,\"true\",NA) where NA is the code for missing. It pays to looks closely at the graph and try to explain what you see. In fact, it was only once I’d tidied the colours up that I noticed that they were not in order along the line. I had used geom_line (join in x-axis order) in place of geom_path (join in data order). So story-telling can help debugging too. Also, it pays to read the help file, even if you think you know how the function works! 4.8 Exercises 4.8.1 Questions Adapt the graph to show the smallest 8 States instead. (Hints: What’s the most likely counterpart to slice_max? Closely-related functions are often to be found in the same help file.) Adapt the graph to show year on the x-axis and CO2/flight on the y-axis. (Hints: Mostly changing the first aes() and deleting some elements. For a pretty graph you might google how to hide the legend “ggplot hide legend,” and how to set the breaks on the x-axis.) 4.8.2 Answers geom_text_repel uses call-out lines when it can’t get the text close. You could experiment with making these a less confusing colour. You might also drop the ‘millions.’ small_states &lt;- aviation_co2 %&gt;% filter(YEAR == 2019) %&gt;% # in year 2019 slice_min(Y_TF, n = 8) %&gt;% # smallest 8 pull(STATE_NAME) ggplot(aviation_co2 %&gt;% filter(STATE_NAME %in% small_states), aes(Y_TF/1e6, Y_CO2_QTY_TONNES/1e6, colour = YEAR, group = STATE_NAME)) + geom_point() + geom_path() + ggrepel::geom_text_repel(aes(label = state_label)) + scale_colour_steps(n.breaks = 8, show.limits = TRUE) + labs(x = &quot;Departing Flights (millions)&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), colour = &quot;Year&quot;, title = &quot;Emissions for the least-busy States&quot;, caption = &quot;Source: EUROCONTROL. &#39;Busiest&#39; means most flights in 2019.&quot;) A pedant might say this shouldn’t be a line chart, but here’s one possibility. ggplot(aviation_co2 %&gt;% filter(STATE_NAME %in% top_states), aes(YEAR, Y_CO2_QTY_TONNES/Y_TF, colour = STATE_NAME)) + geom_path() + # I decided the points looked too heavy ggrepel::geom_text_repel(aes(label = state_label)) + theme(legend.position = &quot;none&quot;) + # turn off legend scale_x_continuous(breaks = 2010:2019, minor_breaks = NULL) + # control the breaks labs(x = &quot;Year&quot;, y = bquote(~CO[2]~&quot; (tonnes per flight)&quot;), title = &quot;Emissions for the busiest 8 States&quot;, caption = &quot;Source: EUROCONTROL. &#39;Busiest&#39; means most flights in 2019.&quot;) that’s a vertical bar, not an ‘l’ or ‘I’↩︎ and we use lower case for the variable name, because that’s our preference, even if the imported names don’t do this↩︎ "],["sorting-bars-saving-graphs-vectors-and-loops.html", "Chapter 5 Sorting Bars, Saving Graphs, Vectors and Loops 5.1 CO2 bar chart 5.2 Exercises", " Chapter 5 Sorting Bars, Saving Graphs, Vectors and Loops While nothing beats a well hand-crafted chart, there are times when you want to just run the code and get a quick update, as a .png say. , probably multiple graphs covering different In this chapter we see how to do a classic sorted-bar chart and to save it to a file for future use. In this chapter geom_col(), reorder(), ggsave(), coord_flip(), slice_max(), %&gt;%, geom_text_repel() 5.1 CO2 bar chart 5.1.1 The simple sorted bar chart A classic visualisation is the bar chart, sorted from longest to shortest. With ggplot there are a couple of ways to get a bar chart. If you want ggplot to count the rows for you, use geom_bar. Here we already have values for the length of the bar, so we use geom_col instead. For the simplest bar charts, there is a quick way to get the order you want. In place of state_label for the x-axis, you give reorder(state_label, Y_CO2_QTY_TONNES), the second being the variable to sort by. If you find the bars a bit top-heavy, put a - in front to reverse the order. The final novelty in this graph is coord_flip(). Forty-something State names is a lot of text to cram onto the horizontal axis. So we flip the axes. You’ll need to decide if this trick works where you want to use the graph. We’ll see other ways to separate the labels on the axes in (TBD). ggplot(aviation_co2 %&gt;% filter(YEAR == 2019), aes(reorder(state_label, Y_CO2_QTY_TONNES), Y_CO2_QTY_TONNES/1e6)) + geom_col() + labs(x = &quot;&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), title = &quot;Aviation Emissions in 2019&quot;, caption = &quot;Source: EUROCONTROL.&quot;) + coord_flip() If you were to google ‘ggplot ordered bar chart,’ you might find references to ‘factors.’ That becomes necessary when the charts are more complicated. We’ll look at that in section (TBD) 5.1.2 Saving a plot You might be looking at the bar chart and thinking that it’s the wrong proportions for your need (portrait rather than landscape, or vice versa) or you might be thinking the axis labels are still a bit squashed together. The proportions on your screen will depend on a number of things including the space you have allowed for the ‘Plots’ window. Now, the plots window has an export button which you could use. It allows for re-sizing, but that means you have to do the same manual intervention each time. We can instead use ggsave() to save the most-recent plot, and at the same time set the aspect ratio that we need. Usually it’s worth doing this before working too much on the font sizes, since you don’t really know if there’s a problem until you’ve seen the png. Finally, we use the graphs folder we created for the project. Square seems about right for this graph; and having one of the dimensions around 15cm also seems to produce png that are good enough for reports and slides without being too big. ggsave(&quot;graphs/FirstSortedBars.png&quot;, width = 15, height = 15, units = &quot;cm&quot;) 5.1.3 Plotting more than one year I can think of four ways to plot more than one year: as staggered bars, though we probably will have to work hard to make enough space; as ‘facets,’ creating one sub-plot per year; as a few graphs, merged and aligned using an dedicated package like cowplot; as multiple graphs using a loop Number (3) is a bit heavy. It’s particularly useful for combining graphs of different variables. We’ll deal with (4) in section (TBD) when we look at loops. The first two we will do in the next sections. 5.1.3.1 Staggered bars, and factors We took some shortcuts in @ref{firstsortedbar}, which will need sorting out for the staggered bars. First we need to choose a couple of years, since there certainly isn’t room for more than two. We used state_label before, but this only exists for 2019, so we have to go back to using STATE_NAME. It’s probably time to make this name title case once and for all. aviation_co2 &lt;- aviation_co2 %&gt;% mutate(STATE_NAME = str_to_title(STATE_NAME)) ggplot(aviation_co2 %&gt;% filter(YEAR %in% c(2010, 2019)), aes(reorder(STATE_NAME, Y_CO2_QTY_TONNES), Y_CO2_QTY_TONNES/1e6, fill = as_factor(YEAR))) + geom_col(position = &quot;dodge&quot;) + labs(x = &quot;&quot;, y = bquote(~CO[2]~&quot; (million tonnes)&quot;), title = &quot;Aviation Emissions in 2019&quot;, caption = &quot;Source: EUROCONTROL.&quot;, fill = &quot;Year&quot;) + coord_flip() 5.2 Exercises 5.2.1 Questions Plot the bar chart of section @ref{firstsortedbard} with the longest bars at the bottom. Plot the bar chart of section @ref{firstsortedbard} without the 3 near-zero entries. (Hints: View the data. Filter on 2019 and choose a threshold.) Read the description of geom_bar in the help file. In the first bar chart, switch to using geom_bar instead. [Hint: A minor addition to the aes().] 5.2.2 Answers Use reorder(state_label, -Y_CO2_QTY_TONNES). Use filter(YEAR == 2019 &amp; Y_CO2_QTY_TONNES &gt; 100000). Replace geom_col with geom_bar and add weight = in front of Y_CO2_QTY_TONNES/1e6, thus switching it from the y parameter to the weight. "],["references.html", "References", " References "]]
